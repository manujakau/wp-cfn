Parameters:
  EnvName:
    Description: Environment name tag
    Type: String
    Default: WordPress-Infra

  VpcCIDR:
    Description: Main VPC CIDR
    Type: String
    Default: 10.192.0.0/16

  PubSubCIDR1:
    Description: Public Subnet One
    Type: String
    Default: 10.192.10.0/24

  PubSubCIDR2:
    Description: Public Subnet Two
    Type: String
    Default: 10.192.11.0/24

  PrivSubCIDR1:
    Description: Private Subnet One
    Type: String
    Default: 10.192.20.0/24

  PrivSubCIDR2:
    Description: Private Subnet Two
    Type: String
    Default: 10.192.21.0/24

  KeyName:
    Description: WordPress Public key
    Type: String
    Default: SAA-C01

  InstanceType:
    Description: "EC2 type"
    Type: String
    Default: t2.micro

  MaxSizeASG:
    Description: "ASG max capacity"
    Type: String
    Default: 2

  MinSizeASG:
    Description: "ASG min capacity"
    Type: String
    Default: 1

  DesiredCapacityASG:
    Description: "ASG desired capacity"
    Type: String
    Default: 1


Mappings:
  RegionMap:
    eu-central-1:
      HVM64: "ami-0502e817a62226e03"
    eu-north-1:
      HVM64: "ami-0a3a4169ad7cb0d77"


#Network

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvName

#InternetGateway Components

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvName

  IGWatt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

#Subnets

  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubSubCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public-Subnet-1

  PubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PubSubCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public-Subnet-2

  PrivSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivSubCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Subnet-1

  PrivSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivSubCIDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Subnet-2

#NatGateway EIPs

  NatGWEIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGWatt
    Properties:
      Domain: vpc

  NatGWEIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGWatt
    Properties:
      Domain: vpc

#NatGateway

  NatGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP1.AllocationId
      SubnetId: !Ref PubSub1

  NatGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP2.AllocationId
      SubnetId: !Ref PubSub2

#RouteTables & RouteTable Association

  PubRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Routes
  MainPubRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWatt
    Properties:
      RouteTableId: !Ref PubRTB1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PubSub1RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRTB1
      SubnetId: !Ref PubSub1
  PubSub2RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRTB1
      SubnetId: !Ref PubSub2

  PrivRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Routes-1
  MainPrivRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTB1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW1
  PrivSub1RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTB1
      SubnetId: !Ref PrivSub1

  PrivRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Routes-2
  MainPrivRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTB2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW2
  PrivSub2RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTB2
      SubnetId: !Ref PrivSub2

#Wordpress SecurityGroup

  WordPressSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "wordpress-sg"
      GroupDescription: "WordPress SecurityGroup"
      VpcId: !Ref VPC
  ingress0:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref WordPressSG
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "elb-wordpress-sg"
      GroupDescription: "WordPress ELB SecurityGroup"
      VpcId: !Ref VPC
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ELBSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "rds-wordpress-sg"
      GroupDescription: "WordPress DB SecurityGroup"
      VpcId: !Ref VPC
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref RDSSG
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !Ref WordPressSG


#Load Balancer

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PrivSub1
        - !Ref PrivSub2
      LoadBalancerName: !Join [ "-", [ !Ref EnvName, ELB ]]
      Listeners:
        - InstancePort: '80'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
      HealthCheck:
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '8'
        Timeout: '5'
        Target: TCP:80/
      SecurityGroups:
        - !Ref ELBSG
      Scheme: 'internet-facing'
      CrossZone: 'true'

#Compute

#  LC:
#    Type: AWS::AutoScaling::LaunchConfiguration
#    Properties:
#      KeyName: !Ref KeyName
#      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]     
#      SecurityGroups:
#        - !Ref WordPressSG
#      InstanceType: !Ref InstanceType
#      LaunchConfigurationName: !Join [ "-", [ !Ref EnvName, LaunchConfig ]]
#
#  ASG:
#    Type: AWS::AutoScaling::AutoScalingGroup
#    Properties:
#      AutoScalingGroupName: !Join [ "-", [ !Ref EnvName, AutoScallingGroup ]]
#      Cooldown: 120
#      DesiredCapacity: !Ref DesiredCapacityASG
#      LaunchConfigurationName: !Ref LC
#      MaxSize: !Ref MaxSizeASG
#      MinSize: !Ref MinSizeASG
#      VPCZoneIdentifier:
#        - !Ref PrivSub1
#        - !Ref PrivSub2
#      Tags:
#        - 
#          Key: Name
#          Value: WordPress ASG
#          PropagateAtLaunch: 'true'


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PubSub1, !Ref PubSub2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivSub1, !Ref PrivSub2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PubSub1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PubSub2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivSub1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivSub2

  SecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref WordPressSG