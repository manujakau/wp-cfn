AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvName:
    Description: Environment name tag
    Type: String
    Default: WordPressInfra

  VpcCIDR:
    Description: Main VPC CIDR
    Type: String
    Default: 10.192.0.0/16

  PubSubCIDR1:
    Description: Public Subnet One
    Type: String
    Default: 10.192.10.0/24

  PubSubCIDR2:
    Description: Public Subnet Two
    Type: String
    Default: 10.192.11.0/24

  PrivSubCIDR1:
    Description: Private Subnet One
    Type: String
    Default: 10.192.20.0/24

  PrivSubCIDR2:
    Description: Private Subnet Two
    Type: String
    Default: 10.192.21.0/24

  DBSubCIDR1:
    Description: DB Subnet One
    Type: String
    Default: 10.192.30.0/24

  DBSubCIDR2:
    Description: DB Subnet Two
    Type: String
    Default: 10.192.31.0/24

  KeyName:
    Description: WordPress SSH Public key
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: SAA-C01

  InstanceType:
    Description: EC2 type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  DBClass:
    Description: DB Type
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.t3.small
      - db.t3.medium

  DBAllocatedStorage:
    Default: '5'
    Description: DB storage
    Type: Number
    MinValue: '5'
    MaxValue: '1024'

  MaxSizeASG:
    Description: "ASG max capacity"
    Type: String
    Default: 3

  MinSizeASG:
    Description: "ASG min capacity"
    Type: String
    Default: 1

  DesiredCapacityASG:
    Description: "ASG desired capacity"
    Type: String
    Default: 2

  DBNAME:
    Description: Wordpress DB name
    Type: String
    Default: wordpress

  DBUSER:
    Description: Wordpress DB user
    Type: String
    Default: wordpress

  DBPASSWORD:
    Description: Wordpress DB password
    Type: String
    Default: wordpress

  MultiAZDatabase:
    Default: 'true'
    Description: Multi-AZ RDS
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

Mappings:
  AMItype:
    t3.nano:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64

  AMItype2:
    t3.nano:
      Arch: NATHVM64
    t3.micro:
      Arch: NATHVM64
    t3.small:
      Arch: NATHVM64
    t3.medium:
      Arch: NATHVM64
    t3.large:
      Arch: NATHVM64

  RegionMap:
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
      HVMG2: ami-32d55b4c

  RegionMap1:
    eu-central-1:
      HVM64: ami-009b16df9fcaac611
    eu-north-1:
      HVM64: ami-08bc26bf92a90ba04

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvName

#InternetGateway Components

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvName

  IGWatt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

#Subnets

  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubSubCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public-Subnet-1

  PubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PubSubCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public-Subnet-2

  PrivSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivSubCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Subnet-1

  PrivSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivSubCIDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Subnet-2

  DBSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref DBSubCIDR1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} DB-Subnet-1

  DBSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref DBSubCIDR2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} DB-Subnet-2

#NatGateway EIP

  NatGWEIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGWatt
    Properties:
      Domain: vpc

  NatGWEIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGWatt
    Properties:
      Domain: vpc

#NatGateway

  NatGW1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP1.AllocationId
      SubnetId: !Ref PubSub1

  NatGW2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEIP2.AllocationId
      SubnetId: !Ref PubSub2

#RouteTables & RouteTable Association

  PubRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Routes
  MainPubRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWatt
    Properties:
      RouteTableId: !Ref PubRTB1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PubSub1RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRTB1
      SubnetId: !Ref PubSub1
  PubSub2RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRTB1
      SubnetId: !Ref PubSub2

  PrivRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Routes-1
  MainPrivRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTB1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW1
  PrivSub1RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTB1
      SubnetId: !Ref PrivSub1

  PrivRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private-Routes-2
  MainPrivRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTB2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW2
  PrivSub2RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTB2
      SubnetId: !Ref PrivSub2

  DBRTB1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} DB-Routes-1
  DBSub1RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRTB1
      SubnetId: !Ref DBSub1

  DBRTB2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} DB-Routes-2
  DBSub2RTBasso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DBRTB2
      SubnetId: !Ref DBSub2

#Compute

  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PubSub1
        - !Ref PubSub2
      Name: !Join [ "-", [ !Ref EnvName, ALB ]]
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /wordpress/wp-admin/install.php
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  WpHostSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: WP server SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ALB
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref WPbastionSG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress ec2 SG

  WpEC2Group:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivSub1
        - !Ref PrivSub2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref MinSizeASG
      MaxSize: !Ref MaxSizeASG
      DesiredCapacity: !Ref DesiredCapacityASG
      TargetGroupARNs:
        - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref WpEC2Group
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80
      EstimatedInstanceWarmup: 60

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBNAME
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUSER
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPASSWORD
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - !GetAtt 
                    - RDSDB
                    - Endpoint.Address
                  - |
                    '/g" wp-config.php
                  - >
                    sed -i 's#DocumentRoot "/var/www/html"#DocumentRoot
                    "/var/www/html/wordpress"#g' /etc/httpd/conf/httpd.conf
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AMItype
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WpHostSG
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WpEC2Group '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  RDSDBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WpHostSG
      VpcId: !Ref VPC

  RDSDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBNAME
      Engine: MySQL
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUSER
      MasterUserPassword: !Ref DBPASSWORD
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups:
        - !GetAtt 
          - RDSDBSG
          - GroupId
      DBSubnetGroupName: !Ref RDSDBSubnets
      StorageType: 'gp2'
  RDSDBSubnets:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'RDS DB subnets'
      SubnetIds:
        - !Ref DBSub1
        - !Ref DBSub2

  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - RegionMap1
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AMItype
          - !Ref InstanceType
          - Arch
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Monitoring: 'true'
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref PubSub1
          GroupSet:
            - !Ref WPbastionSG
          AssociatePublicIpAddress: 'true'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      Tags:
      -
        Key: "Name"
        Value: "WP Bastion Host"

  WPbastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastion-wordpress-sg"
      GroupDescription: "WordPress Bastion SecurityGroup"
      VpcId: !Ref VPC
  ingress0:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WPbastionSG
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WPbastionSG
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

Outputs:
  SiteURL:
    Value: !Join [ "", [ http://, !GetAtt ALB.DNSName ]]   
    Description: "URL to Wordpress site"